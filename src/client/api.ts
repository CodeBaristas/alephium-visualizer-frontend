/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    'detail'?: Array<ValidationError>;
}
/**
 * 
 * @export
 * @interface LocationInner
 */
export interface LocationInner {
}
/**
 * 
 * @export
 * @interface StatsBalanceGroupOut
 */
export interface StatsBalanceGroupOut {
    /**
     * 
     * @type {string}
     * @memberof StatsBalanceGroupOut
     */
    'balance': string;
    /**
     * 
     * @type {string}
     * @memberof StatsBalanceGroupOut
     */
    'balanceHint': string;
    /**
     * 
     * @type {string}
     * @memberof StatsBalanceGroupOut
     */
    'lockedBalance': string;
    /**
     * 
     * @type {string}
     * @memberof StatsBalanceGroupOut
     */
    'lockedBalanceHint': string;
    /**
     * 
     * @type {number}
     * @memberof StatsBalanceGroupOut
     */
    'utxoNum': number;
    /**
     * 
     * @type {number}
     * @memberof StatsBalanceGroupOut
     */
    'group': number;
}
/**
 * 
 * @export
 * @interface StatsCurrentHashrateOut
 */
export interface StatsCurrentHashrateOut {
    /**
     * 
     * @type {string}
     * @memberof StatsCurrentHashrateOut
     */
    'cur_hash': string;
}
/**
 * 
 * @export
 * @interface StatsHistoryHashrateOut
 */
export interface StatsHistoryHashrateOut {
    /**
     * 
     * @type {string}
     * @memberof StatsHistoryHashrateOut
     */
    'his_hash': string;
}
/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<LocationInner>}
     * @memberof ValidationError
     */
    'loc': Array<LocationInner>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'type': string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get Balance And Group By Address
         * @param {string} address 
         * @param {boolean} [mempool] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBalanceAndGroupByAddressStatsAddressesGet: async (address: string, mempool?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'address' is not null or undefined
            assertParamExists('getBalanceAndGroupByAddressStatsAddressesGet', 'address', address)
            const localVarPath = `/stats/addresses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (address !== undefined) {
                localVarQueryParameter['address'] = address;
            }

            if (mempool !== undefined) {
                localVarQueryParameter['mempool'] = mempool;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Current Hashrate
         * @param {number} [timespan] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentHashrateStatsInfoHashrateCurrentGet: async (timespan?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/stats/info/hashrate/current`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (timespan !== undefined) {
                localVarQueryParameter['timespan'] = timespan;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Historic Hashrate
         * @param {number} fromTs 
         * @param {number} [toTs] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHistoricHashrateStatsInfoHashrateHistoricGet: async (fromTs: number, toTs?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fromTs' is not null or undefined
            assertParamExists('getHistoricHashrateStatsInfoHashrateHistoricGet', 'fromTs', fromTs)
            const localVarPath = `/stats/info/hashrate/historic`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (fromTs !== undefined) {
                localVarQueryParameter['from_ts'] = fromTs;
            }

            if (toTs !== undefined) {
                localVarQueryParameter['to_ts'] = toTs;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get Balance And Group By Address
         * @param {string} address 
         * @param {boolean} [mempool] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBalanceAndGroupByAddressStatsAddressesGet(address: string, mempool?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StatsBalanceGroupOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBalanceAndGroupByAddressStatsAddressesGet(address, mempool, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.getBalanceAndGroupByAddressStatsAddressesGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Get Current Hashrate
         * @param {number} [timespan] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCurrentHashrateStatsInfoHashrateCurrentGet(timespan?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StatsCurrentHashrateOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCurrentHashrateStatsInfoHashrateCurrentGet(timespan, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.getCurrentHashrateStatsInfoHashrateCurrentGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Get Historic Hashrate
         * @param {number} fromTs 
         * @param {number} [toTs] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHistoricHashrateStatsInfoHashrateHistoricGet(fromTs: number, toTs?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StatsHistoryHashrateOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHistoricHashrateStatsInfoHashrateHistoricGet(fromTs, toTs, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.getHistoricHashrateStatsInfoHashrateHistoricGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Get Balance And Group By Address
         * @param {string} address 
         * @param {boolean} [mempool] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBalanceAndGroupByAddressStatsAddressesGet(address: string, mempool?: boolean, options?: any): AxiosPromise<StatsBalanceGroupOut> {
            return localVarFp.getBalanceAndGroupByAddressStatsAddressesGet(address, mempool, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Current Hashrate
         * @param {number} [timespan] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentHashrateStatsInfoHashrateCurrentGet(timespan?: number, options?: any): AxiosPromise<StatsCurrentHashrateOut> {
            return localVarFp.getCurrentHashrateStatsInfoHashrateCurrentGet(timespan, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Historic Hashrate
         * @param {number} fromTs 
         * @param {number} [toTs] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHistoricHashrateStatsInfoHashrateHistoricGet(fromTs: number, toTs?: number, options?: any): AxiosPromise<StatsHistoryHashrateOut> {
            return localVarFp.getHistoricHashrateStatsInfoHashrateHistoricGet(fromTs, toTs, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Get Balance And Group By Address
     * @param {string} address 
     * @param {boolean} [mempool] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getBalanceAndGroupByAddressStatsAddressesGet(address: string, mempool?: boolean, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getBalanceAndGroupByAddressStatsAddressesGet(address, mempool, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Current Hashrate
     * @param {number} [timespan] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getCurrentHashrateStatsInfoHashrateCurrentGet(timespan?: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getCurrentHashrateStatsInfoHashrateCurrentGet(timespan, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Historic Hashrate
     * @param {number} fromTs 
     * @param {number} [toTs] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getHistoricHashrateStatsInfoHashrateHistoricGet(fromTs: number, toTs?: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getHistoricHashrateStatsInfoHashrateHistoricGet(fromTs, toTs, options).then((request) => request(this.axios, this.basePath));
    }
}



